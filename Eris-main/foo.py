
import osqp
import numpy as np
from scipy import sparse
import math
import json

def get(x, i): 
    return np.array([r[i] for r in x])

data = np.dtype('int64').type(np.array([(1.0,0,0),(1.0,1,1),(146.75999450683594,1,2),(146.75999450683594,1,3),(73.35250091552734,2,4),(73.37249755859375,2,5),(73.3949966430664,2,6),(73.35250091552734,2,7),(1.0,2,8),(48.92166646321614,3,9),(48.91499837239583,3,10),(48.91999816894531,3,11),(48.923329671223954,3,12),(48.92166646321614,3,13),(1.0,3,8),(48.91999816894531,3,14),(1.0,4,15),(146.60499572753906,4,16),(146.63499450683594,4,17),(1.0,5,15),(146.72499084472656,5,18),(146.6999969482422,5,19),(48.906667073567704,6,20),(48.875,6,21),(48.89333089192708,6,22),(1.0,6,23),(48.86833190917969,6,24),(48.87833150227864,6,25),(48.863332112630204,6,26),(48.906667073567704,7,27),(1.0,7,23),(48.91166687011719,7,28),(48.89666748046875,7,29),(48.913330078125,7,30),(48.90333048502604,7,31),(48.90166727701823,7,32),])
)
q = np.dtype('int64').type(np.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,]
))
data_b = np.dtype('int64').type(np.array([(1.0,0,0),(293.5199890136719,1,0),(293.47249603271484,2,0),(293.5216573079427,3,0),(293.239990234375,4,0),(293.42498779296875,5,0),(293.2849934895833,6,0),(293.4333292643229,7,0),])
)
b = np.reshape(sparse.csc_matrix(sparse.coo_matrix((get(data_b,0),(get(data_b,1),get(data_b,2))),shape=(8,1))).toarray(),-1, order = 'F')
A = sparse.vstack([sparse.vstack([sparse.hstack([sparse.csc_matrix(sparse.coo_matrix((get(data,0),(get(data,1),get(data,2))),shape=(8,33))), sparse.csc_matrix((8,33))]), sparse.vstack([sparse.hstack([sparse.eye(33), -sparse.eye(33)]), sparse.hstack([-sparse.eye(33), -sparse.eye(33)])])], format='csc'),sparse.hstack([sparse.csc_matrix((33,33)),sparse.eye(33)])], format='csc')
l = np.hstack([b,-np.inf*np.ones(2*33), np.zeros(33)])
u = np.hstack([b,np.zeros(2*33),np.inf*np.ones(33)])

prob = osqp.OSQP()
prob.setup(None, q, A, l, u, verbose=False, eps_abs=1.0e+04)
res = prob.solve()
print(json.dumps({"solution": res.x.tolist(), "objective": res.info.obj_val}))
