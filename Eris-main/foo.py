
import osqp
import numpy as np
from scipy import sparse
import math
import json

def get(x, i): 
    return np.array([r[i] for r in x])

data = np.array([(1.0,0,0),(1.0,1,1),(0.5,1,2),(0.5,1,3),(0.25,2,4),(0.25,2,5),(0.25,2,6),(0.25,2,7),(1.0,2,8),(0.16666666666666666,3,9),(0.16666666666666666,3,10),(0.16666666666666666,3,11),(0.16666666666666666,3,12),(1.0,3,8),(0.16666666666666666,3,13),(0.16666666666666666,3,14),(1.0,4,15),(0.5,4,16),(0.5,4,17),(1.0,5,15),(0.5,5,18),(0.5,5,19),(0.16666666666666666,6,20),(0.16666666666666666,6,21),(1.0,6,22),(0.16666666666666666,6,23),(0.16666666666666666,6,24),(0.16666666666666666,6,25),(0.16666666666666666,6,26),(0.16666666666666666,7,27),(1.0,7,22),(0.16666666666666666,7,28),(0.16666666666666666,7,29),(0.16666666666666666,7,30),(0.16666666666666666,7,31),(0.16666666666666666,7,32),])

q = np.array([0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,])

data_b = np.array([(1.0,0,0),(293.5199890136719,1,0),(293.47249603271484,2,0),(293.5216573079427,3,0),(293.239990234375,4,0),(293.42498779296875,5,0),(293.2849934895833,6,0),(293.4333292643229,7,0),])

b = np.reshape(sparse.csc_matrix(sparse.coo_matrix((get(data_b,0),(get(data_b,1),get(data_b,2))),shape=(8,1))).toarray(),-1, order = 'F')
A = sparse.vstack([sparse.csc_matrix(sparse.coo_matrix((get(data,0),(get(data,1),get(data,2))),shape=(8,33))), sparse.eye(33)], format='csc')
l = np.hstack([b, np.zeros(33)])
u = np.hstack([b,np.inf*np.ones(33)])

prob = osqp.OSQP()
prob.setup(None, q, A, l, u, verbose=False, eps_abs=1e-5, eps_rel=1e-5, max_iter=5000, polish=True)
res = prob.solve()
print(json.dumps({"solution": res.x.tolist(), "objective": res.info.obj_val}))
