
import osqp
import numpy as np
from scipy import sparse
import math
import json

def get(x, i): 
    return np.array([r[i] for r in x])

data = np.array([(1.0,0,0),(1.0,1,1),(-1.0,1,2),(-1.0,1,3),(-1.0,1,4),(-1.0,1,5),(-1.0,1,6),(-1466.0299682617188,1,0),(-1.0,2,7),(-1.0,2,8),(-1.0,2,9),(1.0,2,1),(-1.0,2,10),(-1.0,2,11),(-1.0,2,12),(-1.0,2,13),(-1.0,2,14),(-1.0,2,15),(-1.0,2,16),(-1.0,2,17),(-1.0,2,18),(-3522.329864501953,2,0),(1.0,3,19),(-293.5099792480469,3,0),(-1.0,3,20),(-1.0,4,21),(-1.0,4,22),(-1.0,4,23),(-1.0,4,24),(-1.0,4,25),(-3522.179901123047,4,0),(1.0,4,19),(-1.0,4,26),(-1.0,4,27),(-1.0,4,28),(-1.0,4,29),(-1.0,4,30),(-1.0,4,31),(-1.0,4,32),(-1.0,5,33),(-1.0,5,34),(-1.0,5,35),(1.0,5,36),(-1466.6499633789062,5,0),(-1.0,5,37),(-1.0,5,38),(-1.0,6,39),(-1.0,6,40),(-1.0,6,41),(-1.0,6,42),(-1.0,6,43),(-1.0,6,44),(-1.0,6,45),(-1.0,6,46),(-1.0,6,47),(-1.0,6,48),(-1.0,6,49),(1.0,6,36),(-3521.5198974609375,6,0),(-1.0,6,50),(-1.0,7,51),(-1.0,7,52),(-1.0,7,53),(-1466.18994140625,7,0),(1.0,7,54),(-1.0,7,55),(-1.0,7,56),(-1.0,8,57),(-1.0,8,58),(-1.0,8,59),(1.0,8,54),(-1.0,8,60),(-1.0,8,61),(-1.0,8,62),(-1.0,8,63),(-3520.8299560546875,8,0),(-1.0,8,64),(-1.0,8,65),(-1.0,8,66),(-1.0,8,67),(-1.0,8,68),])

P = sparse.csc_matrix(sparse.diags([0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,])
)
q = np.array(np.zeros(69))
A = sparse.csc_matrix(sparse.coo_matrix((get(data,0),(get(data,1),get(data,2))),shape=(9,69)))
c = np.hstack([np.ones(1),np.zeros(9-1)])

prob = osqp.OSQP()
prob.setup(P, q, A, c, c,  verbose=False)
res = prob.solve()
print(json.dumps({"solution": res.x.tolist(), "objective": res.info.obj_val}))
