
import osqp
import numpy as np
from scipy import sparse
import math
import json
def get(x, i): 
    return np.array([r[i] for r in x])
data = np.array([(1.0,0,0),(-97.83665974934895,1,1),(-97.59999593098958,1,2),(-97.68332926432292,1,3),(1.0,1,4),(-293.11998494466144,1,0),(-2.4912500381469727,2,5),(-2.444999933242798,2,6),(-2.494374990463257,2,7),(-2.4912500381469727,2,8),(-2.46875,2,9),(-2.442499876022339,2,10),(-2.4131250381469727,2,11),(-2.5062499046325684,2,12),(1.0,2,4),(-292.9024998188019,2,0),(-97.80333455403645,3,13),(-97.82999674479167,3,14),(-293.39333089192706,3,0),(-97.75999959309895,3,15),(1.0,3,16),(-1.687272678722035,4,17),(-1.8131817904385654,4,18),(1.0,4,16),(-1.687272678722035,4,19),(-1.7990908189253374,4,20),(-1.687272678722035,4,21),(-1.687272678722035,4,22),(-1.814545371315696,4,23),(-292.4622721585361,4,0),(-1.7245453921231357,4,24),(-1.814090902155096,4,25),(-1.7986363497647373,4,26),(-1.7990908189253374,4,27),(-48.90333048502604,5,28),(-48.893330891927086,5,29),(1.0,5,30),(-48.89833068847656,5,31),(-48.871663411458336,5,32),(-293.3349863688151,5,0),(-48.893330891927086,5,33),(-48.875,5,34),(-1.0077499389648437,6,35),(-1.0032499313354493,6,36),(-0.9885000228881836,6,37),(-1.0042499542236327,6,38),(-0.9947500228881836,6,39),(-0.9699999809265136,6,40),(-0.9784999847412109,6,41),(-0.9952499389648437,6,42),(-1.0054999351501466,6,43),(-0.9069999694824219,6,44),(-1.0054999351501466,6,45),(1.0,6,30),(-0.9872499465942383,6,46),(-0.9984999656677246,6,47),(-1.0042499542236327,6,48),(-1.002999973297119,6,49),(-0.9944999694824219,6,50),(-292.87524929046623,6,0),(-0.9457499504089355,6,51),(-0.9917499542236328,6,52),(-0.9514999389648438,6,53),(-0.9885000228881836,6,54),(-32.588887532552086,7,55),(-32.57555474175347,7,56),(-32.60444471571181,7,57),(-32.58110894097222,7,58),(-32.578887939453125,7,59),(-32.58555433485243,7,60),(-32.578887939453125,7,61),(-293.25776841905383,7,0),(1.0,7,62),(-32.58555433485243,7,63),(-32.578887939453125,7,64),(-0.8775000138716265,8,65),(-0.9045454372059215,8,66),(-0.8974999514493075,8,67),(-0.808863639831543,8,68),(-0.9038636467673562,8,69),(-0.910909045826305,8,70),(-0.878636360168457,8,71),(-0.9077272415161133,8,72),(-0.8759091117165305,8,73),(-0.8775000138716265,8,74),(-0.8720454302701083,8,75),(-0.8759091117165305,8,76),(-0.8934090354225852,8,77),(-0.9013636328957297,8,78),(-0.910909045826305,8,79),(-0.9118181575428356,8,80),(-0.9081817973743785,8,81),(-0.8852272900668058,8,82),(-0.8895454406738281,8,83),(-0.9090909090909091,8,84),(-292.7461360931395,8,0),(1.0,8,62),(-0.9024999791925604,8,85),(-0.8931818008422852,8,86),])

P = sparse.block_diag([sparse.csc_matrix((87, 87)), sparse.eye(9)], format='csc')
q = np.array(np.zeros(87 + 9))
Ad = sparse.csc_matrix(sparse.coo_matrix((get(data,0),(get(data,1),get(data,2))),shape=(9,87)))
A = sparse.bmat([[Ad,            -sparse.eye(9)],[sparse.eye(87),  None]], format='csc')
l = np.hstack([np.ones(1),np.zeros(9-1), -np.inf*np.ones(87)])
u = np.hstack([np.ones(1),np.zeros(9-1), np.inf*np.ones(87)])

prob = osqp.OSQP()
prob.setup(P, q, A, l, u,  verbose=False)
res = prob.solve()
print(json.dumps({"solution": res.x.tolist(), "objective": res.info.obj_val}))
